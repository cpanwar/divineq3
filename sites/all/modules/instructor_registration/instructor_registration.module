<?php
/*
 * Implementation of hook_menu
*/
function instructor_registration_menu() {	
	$items['user/instructor/register'] = array(
		'title' => 'Teacher Signup',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('user_instructor_register_form'),
		'access callback' => 'user_register_access',
		'type' => MENU_LOCAL_ACTION,
	);
	$items['admin/user/user/instructor'] = array(
		'title' => 'Add Instructor',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('user_instructor_register_form'),
		'access arguments' => array('administer users'),
		'type' => MENU_LOCAL_TASK,
		'file' => 'user.admin.inc',
		'file path' => drupal_get_path('module', 'user'),
	);	
	return $items;
}

/*
 * Implementation of Instructor registration form
*/ 
function user_instructor_register_form() {
	global $user;
	$nid = getNodeId('registrations-declare');
	$nodeL = node_load($nid);

	// Account information:
	$form['account'] = array(
		'#type' => 'fieldset',
		'#title' => t('Account information'),
		'#weight' => -10,
	);	
	$form['account']['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Username'),
		'#size' => 60,
		'#required' => TRUE,
		'#weight' => -4,
	);
	$form['account']['mail'] = array(
		'#type' => 'textfield',
		'#title' => t('E-mail address'),
		'#size' => 60,
		'#required' => TRUE,
		'#weight' => -3,
	);

	$form[instructor_info] = profile_form_profile($edit, $user, 'Instructor information', $register = FALSE);  

	$settings = variable_get('location_settings_user', array());
	$form['locations'] = location_form($settings, $account->locations);

	// Account information:
	$form['term'] = array(
		'#type' => 'fieldset',
		'#title' => t('Term information'),
		'#weight' => 1,
	);	
	$form[term]['term_desc'] = array(
		'#type' => 'textarea',
		'#title' => t('Terms & Conditions of Contract'),
		'#size' => 40,
		'#default_value' => $nodeL->body,
		'#attributes' => array('readonly' => 'readonly'),
	);
	$form[term]['term_check'] = array(
		'#type' => 'checkbox',
		'#title' => t('<span title="This field is required." class="form-required">*</span> I have read and accepted the above Terms & Conditions and the information submitted by me is true and complete to the best of my knowledge.'),
		'#size' => 10,
	);

	$form[] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
		'#weight' => 4,
	);
  return $form;
}

/**
 * Implementation of hook_validate().
 */
 
function user_instructor_register_form_validate($form, &$form_state) { 
	user_module_invoke('validate', $form_state['values'], $form_state['values'], 'account');
	if(!is_numeric($form_state['values']['profile_inst_phone']) && !empty($form_state['values']['profile_inst_phone'])){
		form_set_error('profile_inst_phone', 'Phone number should be numeric');
	}	
	if(!$form_state['values']['term_check']){
		form_set_error('term_check', 'Please check terms & conditions');
	}

}

/**
 * Implementation of hook_submit().
 */
function user_instructor_register_form_submit($form, &$form_state) {

	$pass = user_password();		
	$profile_inst_dob = array(
							'month' => $form_state['values']['profile_inst_dob']['month'],
							'day' => $form_state['values']['profile_inst_dob']['day'],
							'year' => $form_state['values']['profile_inst_dob']['year']
							);				
	$instructor_user = array(
	  'name' => $form_state['values']['name'],
	  'mail' => $form_state['values']['mail'],
	  'picture' => '',
	  'profile_inst_fname' => $form_state['values']['profile_inst_fname'],
	  'profile_inst_lname' => $form_state['values']['profile_inst_lname'],
	  'profile_inst_certification' => $form_state['values']['profile_inst_certification'],
	  'profile_inst_institute' => $form_state['values']['profile_inst_institute'],
	  'profile_inst_teaching_exp' => $form_state['values']['profile_inst_teaching_exp'],
	  'profile_inst_desc' => $form_state['values']['profile_inst_desc'],
	  'profile_inst_teaching_exp' => $form_state['values']['profile_inst_teaching_exp'],
	  'profile_inst_yoga_style' => $form_state['values']['profile_inst_yoga_style'],
	  'profile_find_site' => $form_state['values']['profile_find_site'],
	  'profile_inst_dob' => $profile_inst_dob,
	  'profile_inst_phone' => $form_state['values']['profile_inst_phone'],
	  'profile_inst_salutation' => $form_state['values']['profile_inst_salutation'],
	  'pass' => $pass,
	);	
	$auto_user = user_save('', $instructor_user);
	$rid = get_role_id($role='expert'); // Assign Role ID (per rtype)
	$uid = $auto_user->uid;
	$user = user_load($uid);
		
	// Update timezone filed in user tables
	//db_query("UPDATE {users} SET tid=%d WHERE uid=%d", $user_timezone, $user->uid);
	
	$locations = array();
	$locations = $form_state['values']['locations'];	
	location_save_locations($locations, array('uid' => $uid));	
	db_query('INSERT INTO {users_roles} (uid, rid) VALUES (%d, %d)', $uid, $rid);
	
	// For mail template at Instructor registration
	$to =  $form_state['values']['mail'];
	$body = "";
	$body .= "Hello ".$user->name."<br/><br/>";
	$body .= "Thank you for registering. Your application for an account is currently pending approval. Once it has been approved, you will receive another e-mail containing information about how to log in, set your password, and other details.<br/><br/>";
	$body .= "Thanks<br/>";
	$body .= "Divinewellness Team";
	$params = array(
					'body' => $body,
					'subject' => 'Account details for '.$user->name.' at '.!site.' (pending admin approval)',
	);
	drupal_set_message(t('Thank you for applying for an account. Your account is currently pending approval by the site administrator. In the meantime, a welcome message with further instructions has been sent to your e-mail address.'));	
	drupal_mail('instructor_registration', 'register_approval_required', $to, language_default(), $params, variable_get('site_mail', ini_get('sendmail_from')));
	
	
}

/*
 * Implementation of hook_user
*/
function instructor_registration_user($op, &$edit, &$account, $category = NULL){
	global $user;
	switch ($op) {
		case 'insert':
				if($user->uid!='1' && arg(0)=='user' && arg(1)=='register'){
					$get_rid = get_role_id($role='member');
					$edit['roles'] += array($get_rid => 'member');
				}
				if((arg(0)=='user' && arg(1)!='instructor')){
					db_query("UPDATE {users} SET tid='%d' WHERE uid=%d", $edit['user_timezone'], $edit['uid']);	
				}	
		break;		
		case 'update':
				if(($user->uid==$account->uid) || ($user->uid!=$account->uid && arg(2)=='edit')){
					db_query("UPDATE {users} SET tid='%d' WHERE uid=%d", $edit['user_timezone'], $account->uid);	
				}	
		break;		
	}
}

/*
 * Implementation of hook_form_alter
*/
function instructor_registration_form_alter(&$form, &$form_state, $form_id){

	global $user;
	$account  = user_load(arg(1));
	
	if($form_id=='user_register'){
		if(empty($user->uid)){
			$form[personal_info] = profile_form_profile($edit, $user, 'Personal Information', $register = FALSE);
		}
		//unset($form['timezone']);
		$options = fetch_timezone();
		$form['user_timezone'] = array(
			'#type' => 'select',
			'#title' => t('Timezone'),
			'#default_value' => $account->tid,
			'#options' => $options,
			'#weight' => 10,
		);		
	}
	
	if($form_id=='user_profile_form'){
		unset($form['timezone']);
		$options = fetch_timezone();
		$form['user_timezone'] = array(
			'#type' => 'select',
			'#title' => t('Timezone'),
			'#default_value' => $account->tid,
			'#options' => $options,
			'#weight' => 10,
		);
	}
	if($form_id=='user_instructor_register_form'){
		$form['instructor_info']['Instructor information']['profile_inst_salutation']['#type']='radios';
		unset($form['instructor_info']['Instructor information']['profile_inst_desc']);
	}
}

/*
 * hook_mail
*/
function instructor_registration_mail($key, &$message, $params) {	
  switch($key) {
    case 'register_approval_required':         
      // define subject and body
	  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];;       
      break;
  }
}

/*
 * Fetch timezone array from database
*/

function fetch_timezone(){
	$query="select tid,name,offsettime,if(offsetsign=1,'+','-') as offsetsign from {divine_timezone} order by name asc" ; 
	$db_result=db_query($query);
	$rs = array();
	while ($row = db_fetch_object($db_result)){
		$rs[$row->tid] = $row->name.' (UTC '.$row->offsetsign.' '.$row->offsettime.')';
	}
	return $rs;
}




/*
 * Implementation get role id from role
 */
function get_role_id($role){
	$rid = db_result(db_query("SELECT rid from role WHERE name='%s'", $role));
	return $rid;
}

/*
 * Implementation of get user unique role
*/
function getUsersUniqueRole($uid){
	$role = db_result(db_query("SELECT r.name FROM users u, role r, users_roles ur WHERE u.uid = ur.uid AND ur.rid = r.rid AND u.uid =%d", $uid));
	return $role;
} 
 
/*
 * Implementation of Guru package listing 
*/ 
function expertPackage($uid){
	$query_package = db_query("SELECT n.nid from node n, divine_guru_package d_gp WHERE d_gp.packageid = n.nid AND n.status = %d AND d_gp.uid=%d", 1, $uid);
	while ($package = db_fetch_object($query_package)){
		$rs[] = $package->nid;
	}
	return $rs;

}

/*
 * Implementation get nid from url alias
 */
function getNodeId($url_alias){
	$src = db_result(db_query("SELECT src from url_alias WHERE dst='%s'", $url_alias));
	$nidArr = explode('/',$src);
	return $nidArr['1'];
}
?>